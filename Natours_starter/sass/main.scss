/*

BEM - Block Element Modifier 

Following BEM gives us better selectors for the css declarations.

Block - Standalone component that is meaningful on its own
Element - Part of a block that has no standalone meaning
Modifier - A different version of a block or an element.

.block{}
.block__element{}
.block__element--modifier{}
.block--modifier{}

*/

/*

CSS Architecture means specifying logical folder structure for defining CSS rules. We will use 7-1 pattern for CSS architecture.

The 7-1 Pattern
7 different folders for partial SASS files.
1 main SASS file to import all other files into a compiled CSS stylesheet.

The 7 folders are:
1. base/ - Basic project definition
2. components/ - Here we have one file for each component
3. layout/ - Here we define overall layout of the project
4. pages/ - Here we have styles for specific pages of the project
5. themes/ - Here we could define different visual themes
6. abstracts/ - Here we put code that doesn't output any CSS like variables, mixins etc.
7. vendors/ - All 3rd party CSS goes in this folder

We are not always going to use all the folders. It depends on the scope and size of the project.

*/

/*
SASS CSS-Preprocessor

Various parts of SASS

1. Variables - for reuseable values such a color, font-sizes, spacing etc.
2. Nesting - to nest selectors inside of one another, allowing us to write less code.
3. Operators - for mathematical operations right inside of CSS.
4. Partials and imports - to write CSS in different files and importing them all into one single file.
5. Mixins - to write reuseable pieces of CSS code
6. Functions - similar to mixins, with the difference that they produce a value that can then be used.
7. Extends - to make different selectors inherit declarations that are common to all of them.
8. Control Directives - for writing complex code using conditionals and loops (not covered in this course). It is used for writing CSS frameworks.

There are 2 syntax of SASS. One is .sass and other is .scss. We will use .scss.

*/

$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

* {
  margin: 0;
  padding: 0;

  /*
    "box-sizing: inherit" will inherit the value of the "box-sizing" property from it's partent and in body{} we declared "box-sizing: border-box". Now all the elements which are immediate children of body will inherit box-sizing value from body{} and their children will inherit from them. And in this way all the elements will get the "border-box" as the value of "box-sizing" property.
  */
  box-sizing: inherit;
}

html {
  /* 
    1. Default font-size of a browser is 16px and we want to set it to 10px.
    2. One way is to set the font-size: 10px directly. In this way we will take away the users capability to increase the font-size from browser's font-size settings.
    3. So we could use percentage to set the font-size here.
    4. Here font-size: 100% means 16px.
    5. Then font-size: ((10/16) * 100)% will mean 10px. Ultimately, font-size: 62.5% will set the default font-size to 10px. And in this way a user could change the font-size via browser settings.
    */
  font-size: 62.5%;
  /*
    Now we will convert all the pixel based figures to rem based figures where 1rem = 10px. This practice will help us in re-setting the font-size when we deal with media-queries for other screen sizes and when the font-size will change respective rem figures will also change accordingly. This will make easier for us to make changes in dimensions via font-size of html element in media-queries.
    */
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url(../img/hero.jpg);
  /* order matters - first gradient then bg image (top to bottom) */
  background-size: cover;
  background-position: top;
  /*bottom, center*/
  position: relative;

  /*Use clippy for making clip-paths*/
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);

  &__logo-box {
    position: absolute;
    left: 4rem;
    top: 4rem;
  }

  &__logo {
    /* Width will adjust automatically. We would have adjusted width and height would have adjusted automatically */
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }
}

/* 
This was just to show that animtions could be used on hover of an element too
.logo:hover {
    animation: moveInRight 3s ease-out;
} */

.heading-primary {
  color: $color-white;
  text-transform: uppercase;
  margin-bottom: 6rem;

  backface-visibility: hidden;
  /* To fix shakyness in the animation */

  &--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /*
    animation-iteration-count: 3; // Number of times animation should happen
    animation-delay: 3s; // Time to wait before animation takes place
    */
  }

  &--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.45rem;

    /* animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out; */

    animation: moveInRight 1s ease-out;
  }
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/*
:link - initial state of the button
:visited - We have already clicked the button
:hover - when user take mouse over and out of the element
:active - mouse down state of the button
*/

.btn {
  &:link,
  &:visited {
    text-transform: capitalize;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s;
    position: relative;
    /* To position .btn-white:after below .btn  */
  }

  &:hover {
    transform: translateY(-0.3rem);
    /* Moves -3px in respect to :link state */
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

    &::after {
      /*this declaration will affect .btn:after when .btn is hovered*/
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }

  &:active {
    transform: translateY(-0.1rem);
    /* Moves -3px in respect to :link state */
    box-shadow: 0 1rem 0.6rem rgba($color-black, 0.2);
  }

  &::after {
    content: "";
    /* this attribute is mandatory for :after or :before, otherwise it will not be visible on the screen */
    display: inline-block;
    /* Keep it same as original .btn:link */
    width: 100%;
    /*This will take the whole width of .btn:link*/
    height: 100%;
    /*This will take the whole height of .btn:link*/
    border-radius: 10rem;
    /* copied it from .btn:link */
    transition: all 0.6s;
  }

  &--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards;
    /* It will apply the 0% state of moveInBottom animation to the .btn*/
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &:after {
      background-color: $color-white;
      position: absolute;
      /* To position it below .btn:link */
      top: 0;
      left: 0;
      z-index: -1;
    }
  }
}
