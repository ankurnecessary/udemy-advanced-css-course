@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";

@import "base/animation";
@import "base/base";
@import "base/typography";
@import "base/utilities";

@import "components/button";
@import "components/composition";
@import "components/feature-box";
@import "components/card";

@import "layout/header";
@import "layout/grid";

@import "pages/home";

/*

BEM - Block Element Modifier 

Following BEM gives us better selectors for the css declarations.

Block - Standalone component that is meaningful on its own
Element - Part of a block that has no standalone meaning
Modifier - A different version of a block or an element.

.block{}
.block__element{}
.block__element--modifier{}
.block--modifier{}

*/

/*

CSS Architecture means specifying logical folder structure for defining CSS rules. We will use 7-1 pattern for CSS architecture.

The 7-1 Pattern
7 different folders for partial SASS files.
1 main SASS file to import all other files into a compiled CSS stylesheet.

The 7 folders are:
1. base/ - Basic project definition
  > _base.scss - CSS reset declarations
  > _animations.scss - animations that we will use across the project
  > _typography.scss - typography related CSS
  > _utilities.scss - Other generic utilities

2. components/ - Here we have one file for each component. Components are the independent parts that could be included in any page of the project.

3. layout/ - Here we define overall layout of the project
  > Header related CSS
  > Footer related CSS
  > And CSS related to other parts of the layout which are generally common

4. pages/ - Here we have styles for specific pages of the project
  > We will have a .scss file for each page like _home.scss

5. themes/ - Here we could define different visual themes
  > This folder is needed if we will declare the themes for a website.

6. abstracts/ - Here we put code that doesn't output any CSS like variables, mixins etc.
  > _functions.scss - functions
  > _mixins.scss - mixins
  > _variables.scss - variables

7. vendors/ - All 3rd party CSS goes in this folder Like the scss files of bootstrap, if we are using it, 3rd-party animations etc.

We are not always going to use all the folders. It depends on the scope and size of the project.

*/

/*
SASS CSS-Preprocessor

Various parts of SASS

1. Variables - for reuseable values such a color, font-sizes, spacing etc.
2. Nesting - to nest selectors inside of one another, allowing us to write less code.
3. Operators - for mathematical operations right inside of CSS.
4. Partials and imports - to write CSS in different files and importing them all into one single file.
5. Mixins - to write reuseable pieces of CSS code
6. Functions - similar to mixins, with the difference that they produce a value that can then be used.
7. Extends - to make different selectors inherit declarations that are common to all of them.
8. Control Directives - for writing complex code using conditionals and loops (not covered in this course). It is used for writing CSS frameworks.

There are 2 syntax of SASS. One is .sass and other is .scss. We will use .scss.

*/

/* 
This was just to show that animtions could be used on hover of an element too
.logo:hover {
    animation: moveInRight 3s ease-out;
} */

/*
Basic Responsive Design Principles

1. Fluid layout
  > To allow page to adapt to the current viewport width (or even height)
  > Use % (or vh / vw) unit instead of px for elements that should adapt to viewport (usually layout)
  > Use max-width instead of width property in CSS.
  > 3 layout types:
    > Float layout (Old technique)
    > Flexbox layout - Modern way of laying out elements in 1-dimensional row without using floats. Perfect for component layouts.
    > CSS Grid layout - For laying out elements in a fully-fledged 2-dimensional grid. Perfect for page layouts and complex components.

2. Responsive units
  > Use rem unit instead of px for most lengths.
  > To make it easy scale the entire layout down (or up) automatically.

3. Flexible images
  > By default images don't scale automatically as we change the viewport, so we need to fix that
  > Always use % for image dimensions, together with the max-width property

4. Media queries
  > To change CSS styles on certain viewport widths (called breakpoints)

*/
